---

#requires following env variables
# HOST: host to connect to, can be defined in inventory file. e.g. user@host or host
# DB_NAME: name of the database to create
# DB_USER: name of the user to create
# DB_PASSWORD: password of the user to create

- hosts: "{{ HOST }}"
  gather_facts: false

  tasks:
    - name: wait for connection
      wait_for_connection:
        delay: 5
        timeout: 600

    - name: update packages
      become: true
      apt:
        update_cache: yes

    - name: install postgress
      become: true
      apt:
        name: 
          - postgresql
          - python3-psycopg2
        state: present
        force_apt_get: yes

    - name: run postgres
      become: yes
      service: name=postgresql state=started enabled=yes

    - name: download infisical strapi dev secrets
      become: yes
      become_user: bitnami
      shell: "infisical export --domain https://infisical.civiconnect.net/api --token {{ INFISICAL_TOKEN_DEVELOPMENT_STRAPI }} --env dev --path /strapi --format csv $@ > ~/strapi-dev.csv"

    - name: download infisical strapi prod secrets
      become: yes
      become_user: bitnami
      shell: "infisical export --domain https://infisical.civiconnect.net/api --token {{ INFISICAL_TOKEN_PRODUCTION_STRAPI }} --env prod --path /strapi --format csv $@ > ~/strapi-prod.csv"

    - name: register variables containing dev secrets from csv files
      community.general.read_csv:
        path: ~/strapi-dev.csv
        key: Key
        delimiter: ','
      register: dev_secrets

    - name: register variables containing prod secrets from csv files
      community.general.read_csv:
        path: ~/strapi-prod.csv
        key: Key
        delimiter: ','
      register: prod_secrets

    - name: delete csv dev file
      become: yes
      become_user: bitnami
      file:
        path: ~/strapi-dev.csv
        state: absent

    - name: delete csv prod file
      become: yes
      become_user: bitnami
      file:
        path: ~/strapi-prod.csv
        state: absent

    - name: create database
      become_user: postgres
      become: yes
      postgresql_db:
        name: "{{ dev_secrets.dict.DB_NAME.Value }}"

    - name: create user
      become_user: postgres
      become: yes
      postgresql_user:
        name: "{{ dev_secrets.dict.DB_USER.Value }}"
        db: "{{ dev_secrets.dict.DB_NAME.Value}}"
        password: "{{ dev_secrets.dict.DB_PASSWORD.Value}}"
        priv: "ALL"
        role_attr_flags: SUPERUSER
        state: present
    
    - name: create dev database
      become_user: postgres
      become: yes
      postgresql_db:
        name: "{{ prod_secrets.dict.DB_NAME.Value }}"

    - name: create dev user
      become_user: postgres
      become: yes
      postgresql_user:
        name: "{{ prod_secrets.dict.DB_USER.Value }}"
        db: "{{ prod_secrets.dict.DB_NAME.Value}}"
        password: "{{ prod_secrets.dict.DB_PASSWORD.Value}}"
        priv: "ALL"
        role_attr_flags: SUPERUSER
        state: present
      

     